{"version":3,"file":"plugin-vueexport-helper-legacy-B_5PT-ZI.js","sources":["../../../../vue-runtime-help/src/hooks/use-app.ts"],"sourcesContent":["/*\n * Tencent is pleased to support the open source community by making TMagicEditor available.\n *\n * Copyright (C) 2025 Tencent.  All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { inject, onBeforeUnmount, onMounted } from 'vue-demi';\n\nimport type TMagicApp from '@tmagic/core';\nimport type { Id, MNodeInstance, Node as TMagicNode } from '@tmagic/core';\nimport { isDslNode } from '@tmagic/core';\n\ninterface Methods {\n  [key: string]: (...args: any[]) => any;\n}\n\ninterface UseAppOptions<T extends MNodeInstance = MNodeInstance> {\n  config: T;\n  iteratorContainerId?: Id[];\n  iteratorIndex?: number[];\n  pageFragmentContainerId?: Id;\n  methods?: Methods;\n}\n\nexport const useNode = <T extends TMagicNode = TMagicNode>(\n  props: Pick<UseAppOptions, 'config' | 'iteratorContainerId' | 'iteratorIndex' | 'pageFragmentContainerId'>,\n  app = inject<TMagicApp>('app'),\n): T | undefined => {\n  if (isDslNode(props.config) && props.config.id) {\n    return app?.getNode(props.config.id, {\n      iteratorContainerId: props.iteratorContainerId,\n      iteratorIndex: props.iteratorIndex,\n      pageFragmentContainerId: props.pageFragmentContainerId,\n    });\n  }\n  return void 0;\n};\n\nexport const registerNodeHooks = (node?: TMagicNode, methods: Methods = {}) => {\n  if (!node) {\n    return;\n  }\n\n  const emitData = {\n    config: node.data,\n    ...methods,\n  };\n\n  node.emit('created', emitData);\n\n  onMounted(() => {\n    node.emit('mounted', emitData);\n  });\n\n  onBeforeUnmount(() => {\n    node.emit('destroy', emitData);\n  });\n};\n\nexport const useApp = <T extends TMagicApp = TMagicApp>({\n  methods,\n  config,\n  iteratorContainerId,\n  iteratorIndex,\n}: UseAppOptions) => {\n  const app = inject<T>('app');\n\n  if (!app) {\n    throw new Error(`component ${config.type}: app is not injected`);\n  }\n\n  const node = useNode(\n    {\n      config,\n      iteratorContainerId,\n      iteratorIndex,\n    },\n    app,\n  );\n\n  if (node && methods) {\n    registerNodeHooks(node, methods);\n  }\n\n  return {\n    app,\n    node,\n  };\n};\n"],"names":["useNode","props","app","inject","isDslNode","config","id","getNode","iteratorContainerId","iteratorIndex","pageFragmentContainerId","registerNodeHooks","node","methods","emitData","data","emit","onMounted","onBeforeUnmount","Error","type"],"mappings":"uJAoCO,MAAMA,QAAU,CACrBC,EACAC,EAAMC,EAAkB,UAExB,GAAIC,EAAUH,EAAMI,SAAWJ,EAAMI,OAAOC,GAC1C,OAAOJ,GAAKK,QAAQN,EAAMI,OAAOC,GAAI,CACnCE,oBAAqBP,EAAMO,oBAC3BC,cAAeR,EAAMQ,cACrBC,wBAAyBT,EAAMS,4BAMxBC,QAAoB,CAACC,EAAmBC,EAAmB,MACtE,IAAKD,EACH,OAGF,MAAME,EAAW,CACfT,OAAQO,EAAKG,QACVF,GAGLD,EAAKI,KAAK,UAAWF,GAErBG,EAAU,KACRL,EAAKI,KAAK,UAAWF,KAGvBI,EAAgB,KACdN,EAAKI,KAAK,UAAWF,aAIH,EACpBD,UACAR,SACAG,sBACAC,oBAEA,MAAMP,EAAMC,EAAU,OAEtB,IAAKD,EACH,UAAUiB,MAAM,aAAad,EAAOe,6BAGtC,MAAMR,EAAOZ,EACX,CACEK,SACAG,sBACAC,iBAEFP,GAOF,OAJIU,GAAQC,GACVF,EAAkBC,EAAMC,GAGnB,CACLX,MACAU"}