{"version":3,"file":"plugin-vueexport-helper-xb2XXZRC.js","sources":["../../../../vue-runtime-help/src/hooks/use-app.ts"],"sourcesContent":["/*\n * Tencent is pleased to support the open source community by making TMagicEditor available.\n *\n * Copyright (C) 2025 Tencent.  All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { inject, onBeforeUnmount, onMounted } from 'vue-demi';\n\nimport type TMagicApp from '@tmagic/core';\nimport type { Id, MNodeInstance, Node as TMagicNode } from '@tmagic/core';\nimport { isDslNode } from '@tmagic/core';\n\ninterface Methods {\n  [key: string]: (...args: any[]) => any;\n}\n\ninterface UseAppOptions<T extends MNodeInstance = MNodeInstance> {\n  config: T;\n  iteratorContainerId?: Id[];\n  iteratorIndex?: number[];\n  pageFragmentContainerId?: Id;\n  methods?: Methods;\n}\n\nexport const useNode = <T extends TMagicNode = TMagicNode>(\n  props: Pick<UseAppOptions, 'config' | 'iteratorContainerId' | 'iteratorIndex' | 'pageFragmentContainerId'>,\n  app = inject<TMagicApp>('app'),\n): T | undefined => {\n  if (isDslNode(props.config) && props.config.id) {\n    return app?.getNode(props.config.id, {\n      iteratorContainerId: props.iteratorContainerId,\n      iteratorIndex: props.iteratorIndex,\n      pageFragmentContainerId: props.pageFragmentContainerId,\n    });\n  }\n  return void 0;\n};\n\nexport const registerNodeHooks = (node?: TMagicNode, methods: Methods = {}) => {\n  if (!node) {\n    return;\n  }\n\n  const emitData = {\n    config: node.data,\n    ...methods,\n  };\n\n  node.emit('created', emitData);\n\n  onMounted(() => {\n    node.emit('mounted', emitData);\n  });\n\n  onBeforeUnmount(() => {\n    node.emit('destroy', emitData);\n  });\n};\n\nexport const useApp = <T extends TMagicApp = TMagicApp>({\n  methods,\n  config,\n  iteratorContainerId,\n  iteratorIndex,\n}: UseAppOptions) => {\n  const app = inject<T>('app');\n\n  if (!app) {\n    throw new Error(`component ${config.type}: app is not injected`);\n  }\n\n  const node = useNode(\n    {\n      config,\n      iteratorContainerId,\n      iteratorIndex,\n    },\n    app,\n  );\n\n  if (node && methods) {\n    registerNodeHooks(node, methods);\n  }\n\n  return {\n    app,\n    node,\n  };\n};\n"],"names":["useNode","props","app","inject","isDslNode","registerNodeHooks","node","methods","emitData","onMounted","onBeforeUnmount","useApp","config","iteratorContainerId","iteratorIndex"],"mappings":"6DAoCO,MAAMA,EAAU,CACrBC,EACAC,EAAMC,EAAkB,KAAK,IACX,CAClB,GAAIC,EAAUH,EAAM,MAAM,GAAKA,EAAM,OAAO,GAC1C,OAAOC,GAAA,YAAAA,EAAK,QAAQD,EAAM,OAAO,GAAI,CACnC,oBAAqBA,EAAM,oBAC3B,cAAeA,EAAM,cACrB,wBAAyBA,EAAM,uBAAA,EAIrC,EAEaI,EAAoB,CAACC,EAAmBC,EAAmB,KAAO,CAC7E,GAAI,CAACD,EACH,OAGF,MAAME,EAAW,CACf,OAAQF,EAAK,KACb,GAAGC,CAAA,EAGLD,EAAK,KAAK,UAAWE,CAAQ,EAE7BC,EAAU,IAAM,CACdH,EAAK,KAAK,UAAWE,CAAQ,CAAA,CAC9B,EAEDE,EAAgB,IAAM,CACpBJ,EAAK,KAAK,UAAWE,CAAQ,CAAA,CAC9B,CACH,EAEaG,EAAS,CAAkC,CACtD,QAAAJ,EACA,OAAAK,EACA,oBAAAC,EACA,cAAAC,CACF,IAAqB,CACnB,MAAMZ,EAAMC,EAAU,KAAK,EAE3B,GAAI,CAACD,EACH,MAAM,IAAI,MAAM,aAAa,OAAAU,EAAO,KAAI,wBAAuB,EAGjE,MAAMN,EAAON,EACX,CACE,OAAAY,EACA,oBAAAC,EACA,cAAAC,CAAA,EAEFZ,CAAA,EAGF,OAAII,GAAQC,GACVF,EAAkBC,EAAMC,CAAO,EAG1B,CACL,IAAAL,EACA,KAAAI,CAAA,CAEJ"}