{"version":3,"file":"lexon-YWi4-JPR.js","sources":["../../../node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/basic-languages/lexon/lexon.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/lexon/lexon.ts\nvar conf = {\n  comments: {\n    lineComment: \"COMMENT\"\n    // blockComment: ['COMMENT', '.'],\n  },\n  brackets: [[\"(\", \")\"]],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \":\", close: \".\" }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"`\", close: \"`\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n    { open: \":\", close: \".\" }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#region\"),\n      end: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#endregion\")\n    }\n  }\n};\nvar language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  // defaultToken: 'invalid',\n  tokenPostfix: \".lexon\",\n  ignoreCase: true,\n  keywords: [\n    \"lexon\",\n    \"lex\",\n    \"clause\",\n    \"terms\",\n    \"contracts\",\n    \"may\",\n    \"pay\",\n    \"pays\",\n    \"appoints\",\n    \"into\",\n    \"to\"\n  ],\n  typeKeywords: [\"amount\", \"person\", \"key\", \"time\", \"date\", \"asset\", \"text\"],\n  operators: [\n    \"less\",\n    \"greater\",\n    \"equal\",\n    \"le\",\n    \"gt\",\n    \"or\",\n    \"and\",\n    \"add\",\n    \"added\",\n    \"subtract\",\n    \"subtracted\",\n    \"multiply\",\n    \"multiplied\",\n    \"times\",\n    \"divide\",\n    \"divided\",\n    \"is\",\n    \"be\",\n    \"certified\"\n  ],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n      // comment\n      [/^(\\s*)(comment:?(?:\\s.*|))$/, [\"\", \"comment\"]],\n      // special identifier cases\n      [\n        /\"/,\n        {\n          token: \"identifier.quote\",\n          bracket: \"@open\",\n          next: \"@quoted_identifier\"\n        }\n      ],\n      [\n        \"LEX$\",\n        {\n          token: \"keyword\",\n          bracket: \"@open\",\n          next: \"@identifier_until_period\"\n        }\n      ],\n      [\"LEXON\", { token: \"keyword\", bracket: \"@open\", next: \"@semver\" }],\n      [\n        \":\",\n        {\n          token: \"delimiter\",\n          bracket: \"@open\",\n          next: \"@identifier_until_period\"\n        }\n      ],\n      // identifiers and keywords\n      [\n        /[a-z_$][\\w$]*/,\n        {\n          cases: {\n            \"@operators\": \"operator\",\n            \"@typeKeywords\": \"keyword.type\",\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      // whitespace\n      { include: \"@whitespace\" },\n      // delimiters and operators\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [/@symbols/, \"delimiter\"],\n      // numbers\n      [/\\d*\\.\\d*\\.\\d*/, \"number.semver\"],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\n      [/\\d+/, \"number\"],\n      // delimiter: after number because of .\\d floats\n      [/[;,.]/, \"delimiter\"]\n    ],\n    quoted_identifier: [\n      [/[^\\\\\"]+/, \"identifier\"],\n      [/\"/, { token: \"identifier.quote\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    space_identifier_until_period: [\n      [\":\", \"delimiter\"],\n      [\" \", { token: \"white\", next: \"@identifier_rest\" }]\n    ],\n    identifier_until_period: [\n      { include: \"@whitespace\" },\n      [\":\", { token: \"delimiter\", next: \"@identifier_rest\" }],\n      [/[^\\\\.]+/, \"identifier\"],\n      [/\\./, { token: \"delimiter\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    identifier_rest: [\n      [/[^\\\\.]+/, \"identifier\"],\n      [/\\./, { token: \"delimiter\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    semver: [\n      { include: \"@whitespace\" },\n      [\":\", \"delimiter\"],\n      [/\\d*\\.\\d*\\.\\d*/, { token: \"number.semver\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"]]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["conf","language"],"mappings":"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","x_google_ignoreList":[0]}