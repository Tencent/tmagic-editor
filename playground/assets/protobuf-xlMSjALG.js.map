{"version":3,"file":"protobuf-xlMSjALG.js","sources":["../../../node_modules/.pnpm/monaco-editor@0.52.2/node_modules/monaco-editor/esm/vs/basic-languages/protobuf/protobuf.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.52.2(404545bded1df6ffa41ea0af4e8ddb219018c6c1)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/protobuf/protobuf.ts\nvar namedLiterals = [\"true\", \"false\"];\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"],\n    [\"<\", \">\"]\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"<\", close: \">\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"<\", close: \">\" },\n    { open: '\"', close: '\"', notIn: [\"string\"] },\n    { open: \"'\", close: \"'\", notIn: [\"string\"] }\n  ],\n  autoCloseBefore: \".,=}])>' \\n\t\",\n  indentationRules: {\n    increaseIndentPattern: new RegExp(\"^((?!\\\\/\\\\/).)*(\\\\{[^}\\\"'`]*|\\\\([^)\\\"'`]*|\\\\[[^\\\\]\\\"'`]*)$\"),\n    decreaseIndentPattern: new RegExp(\"^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\")\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".proto\",\n  brackets: [\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n  ],\n  symbols: /[=><!~?:&|+\\-*/^%]+/,\n  keywords: [\n    \"syntax\",\n    \"import\",\n    \"weak\",\n    \"public\",\n    \"package\",\n    \"option\",\n    \"repeated\",\n    \"oneof\",\n    \"map\",\n    \"reserved\",\n    \"to\",\n    \"max\",\n    \"enum\",\n    \"message\",\n    \"service\",\n    \"rpc\",\n    \"stream\",\n    \"returns\",\n    \"package\",\n    \"optional\",\n    \"true\",\n    \"false\"\n  ],\n  builtinTypes: [\n    \"double\",\n    \"float\",\n    \"int32\",\n    \"int64\",\n    \"uint32\",\n    \"uint64\",\n    \"sint32\",\n    \"sint64\",\n    \"fixed32\",\n    \"fixed64\",\n    \"sfixed32\",\n    \"sfixed64\",\n    \"bool\",\n    \"string\",\n    \"bytes\"\n  ],\n  operators: [\"=\", \"+\", \"-\"],\n  namedLiterals,\n  escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\\\${)`,\n  identifier: /[a-zA-Z]\\w*/,\n  fullIdentifier: /@identifier(?:\\s*\\.\\s*@identifier)*/,\n  optionName: /(?:@identifier|\\(\\s*@fullIdentifier\\s*\\))(?:\\s*\\.\\s*@identifier)*/,\n  messageName: /@identifier/,\n  enumName: /@identifier/,\n  messageType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@messageName/,\n  enumType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@enumName/,\n  floatLit: /[0-9]+\\s*\\.\\s*[0-9]*(?:@exponent)?|[0-9]+@exponent|\\.[0-9]+(?:@exponent)?/,\n  exponent: /[eE]\\s*[+-]?\\s*[0-9]+/,\n  boolLit: /true\\b|false\\b/,\n  decimalLit: /[1-9][0-9]*/,\n  octalLit: /0[0-7]*/,\n  hexLit: /0[xX][0-9a-fA-F]+/,\n  type: /double|float|int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string|bytes|@messageType|@enumType/,\n  keyType: /int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string/,\n  tokenizer: {\n    root: [\n      { include: \"@whitespace\" },\n      [/syntax/, \"keyword\"],\n      [/=/, \"operators\"],\n      [/;/, \"delimiter\"],\n      [\n        /(\")(proto3)(\")/,\n        [\"string.quote\", \"string\", { token: \"string.quote\", switchTo: \"@topLevel.proto3\" }]\n      ],\n      [\n        /(\")(proto2)(\")/,\n        [\"string.quote\", \"string\", { token: \"string.quote\", switchTo: \"@topLevel.proto2\" }]\n      ],\n      [\n        // If no `syntax` provided, regarded as proto2\n        /.*?/,\n        { token: \"\", switchTo: \"@topLevel.proto2\" }\n      ]\n    ],\n    topLevel: [\n      // whitespace\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/=/, \"operators\"],\n      [/[;.]/, \"delimiter\"],\n      [\n        /@fullIdentifier/,\n        {\n          cases: {\n            option: { token: \"keyword\", next: \"@option.$S2\" },\n            enum: { token: \"keyword\", next: \"@enumDecl.$S2\" },\n            message: { token: \"keyword\", next: \"@messageDecl.$S2\" },\n            service: { token: \"keyword\", next: \"@serviceDecl.$S2\" },\n            extend: {\n              cases: {\n                \"$S2==proto2\": { token: \"keyword\", next: \"@extendDecl.$S2\" }\n              }\n            },\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ]\n    ],\n    enumDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"type.identifier\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@enumBody.$S2\" }]\n    ],\n    enumBody: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/=/, \"operators\"],\n      [/;/, \"delimiter\"],\n      [/option\\b/, \"keyword\", \"@option.$S2\"],\n      [/@identifier/, \"identifier\"],\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    messageDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"type.identifier\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@messageBody.$S2\" }]\n    ],\n    messageBody: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/=/, \"operators\"],\n      [/;/, \"delimiter\"],\n      [\n        \"(map)(s*)(<)\",\n        [\"keyword\", \"white\", { token: \"@brackets\", bracket: \"@open\", next: \"@map.$S2\" }]\n      ],\n      [\n        /@identifier/,\n        {\n          cases: {\n            option: { token: \"keyword\", next: \"@option.$S2\" },\n            enum: { token: \"keyword\", next: \"@enumDecl.$S2\" },\n            message: { token: \"keyword\", next: \"@messageDecl.$S2\" },\n            oneof: { token: \"keyword\", next: \"@oneofDecl.$S2\" },\n            extensions: {\n              cases: {\n                \"$S2==proto2\": { token: \"keyword\", next: \"@reserved.$S2\" }\n              }\n            },\n            reserved: { token: \"keyword\", next: \"@reserved.$S2\" },\n            \"(?:repeated|optional)\": { token: \"keyword\", next: \"@field.$S2\" },\n            required: {\n              cases: {\n                \"$S2==proto2\": { token: \"keyword\", next: \"@field.$S2\" }\n              }\n            },\n            \"$S2==proto3\": { token: \"@rematch\", next: \"@field.$S2\" }\n          }\n        }\n      ],\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    extendDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"type.identifier\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@extendBody.$S2\" }]\n    ],\n    extendBody: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/;/, \"delimiter\"],\n      [/(?:repeated|optional|required)/, \"keyword\", \"@field.$S2\"],\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    options: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/;/, \"delimiter\"],\n      [/@optionName/, \"annotation\"],\n      [/[()]/, \"annotation.brackets\"],\n      [/=/, \"operator\"],\n      [/\\]/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    option: [\n      { include: \"@whitespace\" },\n      [/@optionName/, \"annotation\"],\n      [/[()]/, \"annotation.brackets\"],\n      [/=/, \"operator\", \"@pop\"]\n    ],\n    oneofDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"identifier\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@oneofBody.$S2\" }]\n    ],\n    oneofBody: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/;/, \"delimiter\"],\n      [/(@identifier)(\\s*)(=)/, [\"identifier\", \"white\", \"delimiter\"]],\n      [\n        /@fullIdentifier|\\./,\n        {\n          cases: {\n            \"@builtinTypes\": \"keyword\",\n            \"@default\": \"type.identifier\"\n          }\n        }\n      ],\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    reserved: [\n      { include: \"@whitespace\" },\n      [/,/, \"delimiter\"],\n      [/;/, \"delimiter\", \"@pop\"],\n      { include: \"@constant\" },\n      [/to\\b|max\\b/, \"keyword\"]\n    ],\n    map: [\n      { include: \"@whitespace\" },\n      [\n        /@fullIdentifier|\\./,\n        {\n          cases: {\n            \"@builtinTypes\": \"keyword\",\n            \"@default\": \"type.identifier\"\n          }\n        }\n      ],\n      [/,/, \"delimiter\"],\n      [/>/, { token: \"@brackets\", bracket: \"@close\", switchTo: \"identifier\" }]\n    ],\n    field: [\n      { include: \"@whitespace\" },\n      [\n        \"group\",\n        {\n          cases: {\n            \"$S2==proto2\": { token: \"keyword\", switchTo: \"@groupDecl.$S2\" }\n          }\n        }\n      ],\n      [/(@identifier)(\\s*)(=)/, [\"identifier\", \"white\", { token: \"delimiter\", next: \"@pop\" }]],\n      [\n        /@fullIdentifier|\\./,\n        {\n          cases: {\n            \"@builtinTypes\": \"keyword\",\n            \"@default\": \"type.identifier\"\n          }\n        }\n      ]\n    ],\n    groupDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"identifier\"],\n      [\"=\", \"operator\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@messageBody.$S2\" }],\n      { include: \"@constant\" }\n    ],\n    type: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"type.identifier\", \"@pop\"],\n      [/./, \"delimiter\"]\n    ],\n    identifier: [{ include: \"@whitespace\" }, [/@identifier/, \"identifier\", \"@pop\"]],\n    serviceDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"identifier\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@serviceBody.$S2\" }]\n    ],\n    serviceBody: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/;/, \"delimiter\"],\n      [/option\\b/, \"keyword\", \"@option.$S2\"],\n      [/rpc\\b/, \"keyword\", \"@rpc.$S2\"],\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    rpc: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"identifier\"],\n      [/\\(/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@request.$S2\" }],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", next: \"@methodOptions.$S2\" }],\n      [/;/, \"delimiter\", \"@pop\"]\n    ],\n    request: [\n      { include: \"@whitespace\" },\n      [\n        /@messageType/,\n        {\n          cases: {\n            stream: { token: \"keyword\", next: \"@type.$S2\" },\n            \"@default\": \"type.identifier\"\n          }\n        }\n      ],\n      [/\\)/, { token: \"@brackets\", bracket: \"@close\", switchTo: \"@returns.$S2\" }]\n    ],\n    returns: [\n      { include: \"@whitespace\" },\n      [/returns\\b/, \"keyword\"],\n      [/\\(/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@response.$S2\" }]\n    ],\n    response: [\n      { include: \"@whitespace\" },\n      [\n        /@messageType/,\n        {\n          cases: {\n            stream: { token: \"keyword\", next: \"@type.$S2\" },\n            \"@default\": \"type.identifier\"\n          }\n        }\n      ],\n      [/\\)/, { token: \"@brackets\", bracket: \"@close\", switchTo: \"@rpc.$S2\" }]\n    ],\n    methodOptions: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/;/, \"delimiter\"],\n      [\"option\", \"keyword\"],\n      [/@optionName/, \"annotation\"],\n      [/[()]/, \"annotation.brackets\"],\n      [/=/, \"operator\"],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    comment: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\/\\*/, \"comment\", \"@push\"],\n      // nested comment\n      [\"\\\\*/\", \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    string: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, { token: \"string.quote\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    stringSingle: [\n      [/[^\\\\']+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/'/, { token: \"string.quote\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    constant: [\n      [\"@boolLit\", \"keyword.constant\"],\n      [\"@hexLit\", \"number.hex\"],\n      [\"@octalLit\", \"number.octal\"],\n      [\"@decimalLit\", \"number\"],\n      [\"@floatLit\", \"number.float\"],\n      [/(\"([^\"\\\\]|\\\\.)*|'([^'\\\\]|\\\\.)*)$/, \"string.invalid\"],\n      // non-terminated string\n      [/\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@string\" }],\n      [/'/, { token: \"string.quote\", bracket: \"@open\", next: \"@stringSingle\" }],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", next: \"@prototext\" }],\n      [/identifier/, \"identifier\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ],\n    prototext: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/@identifier/, \"identifier\"],\n      [/[:;]/, \"delimiter\"],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["namedLiterals","conf","language"],"mappings":"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","x_google_ignoreList":[0]}